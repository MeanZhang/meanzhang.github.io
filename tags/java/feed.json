{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mean 个人博客 • All posts by \"java\" tag",
    "description": "Mean 个人博客",
    "home_page_url": "https://blog.meancoder.xyz",
    "items": [
        {
            "id": "https://blog.meancoder.xyz/2020/biginteger-usage/",
            "url": "https://blog.meancoder.xyz/2020/biginteger-usage/",
            "title": "BigInteger 用法",
            "date_published": "2020-05-16T13:36:22.000Z",
            "content_html": "<p>今天在写 RSA，又用到了<code>java.math.BigInteger</code>类<a\nhref=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"\nrole=\"doc-noteref\"><sup>1</sup></a>，总结一下常用的用法。（写完才发现\ngcd 和求逆方法都有了）</p>\n<span id=\"more\"></span>\n<h2 id=\"biginteger-介绍\">BigInteger 介绍</h2>\n<p>继承自<code>Number</code>类，可表示任意长度的整数。<code>BigInteger</code>用等号可以直接进行复制，而不是引用地址。</p>\n<h2 id=\"构造方法\">构造方法</h2>\n<ul>\n<li><p><code>public BigInteger(int numBits, Random rnd)</code></p>\n<p>构造一个随机生成的<code>numBits</code>位的<code>BigInteger</code>。</p></li>\n<li><p><code>public BigInteger(String val)</code></p>\n<p>将十进制字符串表示的<code>val</code>转为<code>BigInteger</code>。</p></li>\n<li><p><code>public BigInteger(String val, int radix)</code></p>\n<p>将<code>radix</code>进制字符串表示的<code>val</code>转为<code>BigInteger</code>。</p></li>\n</ul>\n<h2 id=\"常用方法\">常用方法</h2>\n<ul>\n<li><p><code>public BigInteger add(BigInteger val)</code></p>\n<p>加法。</p></li>\n<li><p><code>public BigInteger subtract(BigInteger val)</code></p>\n<p>减法。</p></li>\n<li><p><code>public BigInteger multiply(BigInteger val)</code></p>\n<p>乘法。</p></li>\n<li><p><code>public BigInteger divide(BigInteger val)</code></p>\n<p>除法。</p></li>\n<li><p><code>public BigInteger[] divideAndRemainder(BigInteger val)</code></p>\n<p>带余除法，返回商和余数。</p></li>\n<li><p><code>public BigInteger remainder(BigInteger val)</code></p>\n<p>求余数。</p></li>\n<li><p><code>public BigInteger mod(BigInteger m)</code></p>\n<p>取模，注意和取余的区别。</p></li>\n<li><p><code>public BigInteger pow(int exponent)</code></p>\n<p>幂运算。</p></li>\n<li><p><code>public BigInteger gcd(BigInteger val)</code></p>\n<p>求最大公因子。</p></li>\n<li><p><code>public BigInteger abs()</code></p>\n<p>取绝对值。</p></li>\n<li><p><code>public BigInteger negate()</code></p>\n<p>取相反数。</p></li>\n<li><p><code>public BigInteger modPow(BigInteger exponent, BigInteger m)</code></p>\n<p>模幂。</p></li>\n<li><p><code>public BigInteger modInverse(BigInteger m)</code></p>\n<p>求逆元。</p></li>\n<li><p><code>public BigInteger shiftLeft(int n)</code></p>\n<p>左移<code>n</code>位。</p></li>\n<li><p><code>public BigInteger shiftRight(int n)</code></p>\n<p>右移<code>n</code>位。</p></li>\n<li><p><code>public int bitLength()</code></p>\n<p>返回二进制位数，不包括符号位。</p></li>\n<li><p><code>public static BigInteger valueOf(long val)</code></p>\n<p>返回一个值为<code>val</code>的<code>BigInteger</code>。</p></li>\n<li><p><code>public static BigInteger probablePrime(int bitLength, Random rnd)</code></p>\n<p>返回一个<code>bitLength</code>位的可能是素数的<code>BigInteger</code>。</p></li>\n<li><p><code>public boolean isProbablePrime(int certainty)</code></p>\n<p>判断是否可能为素数，素数准确率为<span\nclass=\"math inline\">1 − 1/2<sup><em>c</em><em>e</em><em>r</em><em>t</em><em>a</em><em>i</em><em>n</em><em>t</em><em>y</em></sup></span>。</p></li>\n<li><p><code>public int compareTo(BigInteger val)</code></p>\n<p>比较大小。小于返回<code>-1</code>，相等返回<code>0</code>，大于返回<code>1</code>。</p></li>\n<li><p><code>public boolean equals(Object x)</code></p>\n<p>判断是否相等。</p></li>\n<li><p><code>public String toString(int radix)</code></p>\n<p>返回以<code>radix</code>进制表示的字符串。若不传入参数，默认为十进制。</p></li>\n<li><p><code>public int intValue()</code></p>\n<p>将<code>BigInteger</code>转为<code>int</code>。</p></li>\n</ul>\n<h2 id=\"参考资料\">参考资料</h2>\n<aside id=\"footnotes\" class=\"footnotes footnotes-end-of-document\"\nrole=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p><a\nhref=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/math/BigInteger.html\">BigInteger\n(Java SE 14 &amp; JDK 14)</a><a href=\"#fnref1\" class=\"footnote-back\"\nrole=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</aside>\n",
            "tags": [
                "Java",
                "密码学",
                "RSA"
            ]
        }
    ]
}