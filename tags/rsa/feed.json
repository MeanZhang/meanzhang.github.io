{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mean 个人博客 • All posts by \"rsa\" tag",
    "description": "Mean 个人博客",
    "home_page_url": "https://blog.meancoder.xyz",
    "items": [
        {
            "id": "https://blog.meancoder.xyz/2020/MMRC/",
            "url": "https://blog.meancoder.xyz/2020/MMRC/",
            "title": "改进的混合基数转换法（MMRC）",
            "date_published": "2020-05-19T01:56:28.000Z",
            "content_html": "<p>混合基数转换法（Mixed-Radix Conversion, MRC）是求 CRT\n唯一解的方法，Kunth\n对其进行了改进。可将改算法改进为改进的混合基数转换法（Modified\nMixed-Radix Conversion, MMRC）。</p>\n<span id=\"more\"></span>\n<p>MRC 比较复杂，在这里不做介绍，可以参考<a\nhref=\"http://www.cnki.com.cn/Article/CJFDTotal-HBKX200303003.htm\">《中国剩余定理在\nRSA 解密中的应用》</a><a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"\nrole=\"doc-noteref\"><sup>1</sup></a>。</p>\n<h2 id=\"mmrc\">MMRC</h2>\n<p>下面来介绍一下 MMRC：</p>\n<p>设同余方程组为：</p>\n<p><span class=\"math display\">$$\n\\begin{cases}\nx≡d_1\\pmod{p_1}\\\\\nx≡d_2\\pmod{p_2}\\\\\n......\\\\\nx≡d_s\\pmod{p_s}\\\\\n\\end{cases}\n$$</span></p>\n<ol type=\"1\">\n<li>计算<span\nclass=\"math inline\"><em>B</em><sub><em>j</em><em>i</em></sub> ← <em>p</em><sub><em>j</em></sub><sup>−1</sup> (mod  <em>p</em><sub><em>i</em></sub>)(1≤<em>j</em>&lt;<em>i</em>≤<em>s</em>)</span>；</li>\n<li>令<span\nclass=\"math inline\"><em>a</em><sub><em>i</em>1</sub> = <em>d</em><sub><em>i</em></sub>(1≤<em>i</em>≤<em>s</em>)</span>，由递推公式<span\nclass=\"math inline\"><em>a</em><sub><em>i</em>(<em>j</em>+1)</sub> = (<em>a</em><sub><em>i</em><em>j</em></sub>−<em>a</em><sub><em>j</em><em>j</em></sub>)<em>B</em><sub><em>j</em><em>i</em></sub> mod  <em>p</em><sub><em>i</em></sub>(1≤<em>j</em>&lt;<em>i</em>≤<em>s</em>)</span>，计算<span\nclass=\"math inline\"><em>a</em><sub>11</sub>, <em>a</em><sub>22</sub>, ..., <em>a</em><sub><em>s</em><em>s</em></sub></span>;</li>\n<li>计算唯一解<span\nclass=\"math inline\"><em>x</em> ← <em>a</em><sub>11</sub> + <em>a</em><sub>22</sub><em>p</em><sub>1</sub> + <em>a</em><sub>33</sub><em>p</em><sub>1</sub><em>p</em><sub>2</sub> + ... + <em>a</em><sub><em>s</em><em>s</em></sub><em>p</em><sub>1</sub><em>p</em><sub>2</sub><em>p</em><sub>3</sub>...<em>p</em><sub><em>s</em></sub></span>。</li>\n</ol>\n<p>特别地，对于只包含两个方程的方程组</p>\n<p><span class=\"math display\">$$\n\\begin{cases}\nx≡d_1\\pmod{p_1}\\\\\nx≡d_2\\pmod{p_2}\\\\\n\\end{cases}\n$$</span></p>\n<p>可以这样计算：</p>\n<ol type=\"1\">\n<li>计算<span\nclass=\"math inline\"><em>B</em><sub>12</sub> ← <em>p</em><sub>1</sub><sup>−1</sup> (mod  <em>p</em><sub>2</sub>)</span>；</li>\n<li><span\nclass=\"math inline\"><em>a</em><sub>11</sub> = <em>d</em><sub>1</sub></span>，<span\nclass=\"math inline\"><em>a</em><sub>21</sub> = <em>d</em><sub>2</sub></span>，计算<span\nclass=\"math inline\"><em>a</em><sub>22</sub> = (<em>a</em><sub>21</sub>−<em>a</em><sub>11</sub>)<em>B</em><sub>12</sub> mod  <em>p</em><sub>2</sub></span>;</li>\n<li>计算唯一解<span\nclass=\"math inline\"><em>x</em> ← <em>a</em><sub>11</sub> + <em>a</em><sub>22</sub><em>p</em><sub>1</sub></span>。</li>\n</ol>\n<h2 id=\"mmrc-在-rsa-解密中的作用\">MMRC 在 RSA 解密中的作用</h2>\n<p>RSA 的解密过程为<span\nclass=\"math inline\"><em>M</em> = <em>C</em><sup><em>d</em></sup> mod  <em>N</em></span>，而<span\nclass=\"math inline\"><em>N</em> = <em>p</em><em>q</em></span>且<span\nclass=\"math inline\"><em>p</em></span>和<span\nclass=\"math inline\"><em>q</em></span>互素，所以 M 可以通过下式求出：</p>\n<p><span class=\"math display\">$$\n\\begin{cases}\nm_1≡C^d\\pmod p\\\\\nm_2≡C^d\\pmod q\\\\\n\\end{cases}\n$$</span></p>\n<p>其中<span\nclass=\"math inline\"><em>m</em><sub>1</sub> = <em>C</em><sup><em>d</em></sup> mod  <em>p</em></span>，<span\nclass=\"math inline\"><em>m</em><sub>2</sub> = <em>C</em><sup><em>d</em></sup> mod  <em>q</em></span>。</p>\n<p>由此我们可以得到快速解密的算法：</p>\n<ol type=\"1\">\n<li>计算<span\nclass=\"math inline\"><em>m</em><sub>1</sub> ← (<em>C</em> mod  <em>p</em>)<sup><em>d</em> mod  <em>p</em> − 1</sup> mod  <em>p</em></span>，<span\nclass=\"math inline\"><em>m</em><sub>2</sub> ← (<em>C</em> mod  <em>q</em>)<sup><em>d</em> mod  <em>q</em> − 1</sup> mod  <em>q</em></span>；</li>\n<li>计算<span\nclass=\"math inline\"><em>p</em><sup>−1</sup> (mod  <em>q</em>)</span>；</li>\n<li>计算<span\nclass=\"math inline\"><em>t</em> ← <em>p</em><sup>−1</sup>(<em>m</em><sub>2</sub>−<em>m</em><sub>1</sub>) mod  <em>q</em></span>；</li>\n<li>计算明文<span\nclass=\"math inline\"><em>M</em> ← <em>m</em><sub>1</sub> + <em>t</em><em>p</em></span>。</li>\n</ol>\n<p>在第 1 步中，由于<span\nclass=\"math inline\"><em>p</em></span>是素数，由费马小定理<a href=\"#fn2\"\nclass=\"footnote-ref\" id=\"fnref2\"\nrole=\"doc-noteref\"><sup>2</sup></a>可得，<span\nclass=\"math inline\"><em>C</em><sup><em>p</em> − 1</sup> ≡ 1 (mod  <em>p</em>)</span>，所以<span\nclass=\"math inline\">(<em>C</em> mod  <em>p</em>)<sup><em>d</em> mod  <em>p</em> − 1</sup> mod  <em>p</em> = <em>C</em><sup><em>d</em></sup> mod  <em>p</em></span>，<span\nclass=\"math inline\"><em>m</em><sub>2</sub></span>同理。</p>\n<p>下面给出我的代码，完整代码见<a\nhref=\"https://github.com/MeanZhang/RSA\">MeanZhang/RSA:\nRSA-Java</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RSA解密</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用了MMRC算法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> d 私钥d</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> p p</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> q q</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 明文</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title function_\">decrypt</span><span class=\"params\">(BigInteger c, BigInteger d, BigInteger p, BigInteger q)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// m1 ≡ c^d ≡ (c mod p)^(d mod (p-1))(mod p)</span></span><br><span class=\"line\">    <span class=\"type\">BigInteger</span> <span class=\"variable\">m1</span> <span class=\"operator\">=</span> c.mod(p).modPow(d.mod(p.subtract(BigInteger.ONE)), p);</span><br><span class=\"line\">    <span class=\"comment\">// m2 ≡ c^d ≡ (c mod q)^(d mod (q-1))(mod q)</span></span><br><span class=\"line\">    <span class=\"type\">BigInteger</span> <span class=\"variable\">m2</span> <span class=\"operator\">=</span> c.mod(q).modPow(d.mod(q.subtract(BigInteger.ONE)), q);</span><br><span class=\"line\">    <span class=\"type\">BigInteger</span> <span class=\"variable\">invP</span> <span class=\"operator\">=</span> p.modInverse(q);</span><br><span class=\"line\">    <span class=\"comment\">// t = p^(-1) * (m2-m1) mod q</span></span><br><span class=\"line\">    <span class=\"type\">BigInteger</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> invP.multiply(m2.subtract(m1)).mod(q);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m1.add(t.multiply(p));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\">参考资料</h2>\n<aside id=\"footnotes\" class=\"footnotes footnotes-end-of-document\"\nrole=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p><a\nhref=\"http://www.cnki.com.cn/Article/CJFDTotal-HBKX200303003.htm\">中国剩余定理在\nRSA 解密中的应用–《河北省科学院学报》2003 年 03 期</a><a href=\"#fnref1\"\nclass=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\"><p><a\nhref=\"https://zh.wikipedia.org/wiki/费马小定理\">费马小定理 -\n维基百科，自由的百科全书</a><a href=\"#fnref2\" class=\"footnote-back\"\nrole=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</aside>\n",
            "tags": [
                "密码学",
                "RSA",
                "抽象代数",
                "中国剩余定理"
            ]
        },
        {
            "id": "https://blog.meancoder.xyz/2020/RSA-given-e-d-n-factorize-n/",
            "url": "https://blog.meancoder.xyz/2020/RSA-given-e-d-n-factorize-n/",
            "title": "RSA 已知 e，d 和 n，分解 N",
            "date_published": "2020-05-18T14:07:38.000Z",
            "content_html": "<p>这次的密码学实验有一个已知 <span\nclass=\"math inline\"><em>e</em></span> ， <span\nclass=\"math inline\"><em>d</em></span> 和 <span\nclass=\"math inline\"><em>N</em></span> ，分解 <span\nclass=\"math inline\"><em>N</em></span>\n的问题，想了很久（其实没想多久，试了一下就放弃了），然后就到网上找资料。找到了一个很好用的网站，<a\nhref=\"https://www.di-mgt.com.au/index.html\">DI Management\nHome</a>，都是关于密码学的，里面就有关于这个问题的算法<a href=\"#fn1\"\nclass=\"footnote-ref\" id=\"fnref1\"\nrole=\"doc-noteref\"><sup>1</sup></a>。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>Initially we compute <span\nclass=\"math inline\"><em>k</em> = <em>d</em><em>e</em> − 1</span> . We\nthen choose a random integer <span class=\"math inline\"><em>g</em></span>\nin the range <span\nclass=\"math inline\">1 &lt; <em>g</em> &lt; <em>N</em></span> . Now <span\nclass=\"math inline\"><em>k</em></span> is an even number, where <span\nclass=\"math inline\"><em>k</em> = 2<sup><em>t</em></sup><em>r</em></span>\nwith <span class=\"math inline\"><em>r</em></span> odd and <span\nclass=\"math inline\"><em>t</em> ≥ 1</span> , so we can compute <span\nclass=\"math inline\"><em>x</em> = <em>g</em><sup><em>k</em>/2</sup>, <em>g</em><sup><em>k</em>/4</sup>, …, <em>g</em><sup><em>k</em>/2<sup><em>t</em></sup></sup> (mod  <em>N</em>)</span>\nuntil <span class=\"math inline\"><em>x</em> &gt; 1</span> and <span\nclass=\"math inline\"><em>y</em> = gcd (<em>x</em>−1,<em>N</em>) &gt; 1</span>\n. If so, then one of our factors, say <span\nclass=\"math inline\"><em>p</em></span> , is equal to <span\nclass=\"math inline\"><em>y</em></span> , and the other is <span\nclass=\"math inline\"><em>q</em> = <em>N</em>/<em>y</em></span> and we are\ndone. If we don’t find a solution, then we choose another random <span\nclass=\"math inline\"><em>g</em></span> .</p>\n<p>DI Management - <em><a\nhref=\"https://www.di-mgt.com.au/rsa_factorize_n.html\">RSA: how to\nfactorize N given d</a></em></p>\n</blockquote>\n<p>简单翻译一下：</p>\n<blockquote>\n<p>首先我们计算 <span\nclass=\"math inline\"><em>k</em> = <em>d</em><em>e</em> − 1</span>\n。然后选择一个随机数 <span class=\"math inline\"><em>g</em></span> ，满足\n<span class=\"math inline\">1 &lt; <em>g</em> &lt; <em>N</em></span> 。\n<span class=\"math inline\"><em>k</em></span> 是偶数，所以 <span\nclass=\"math inline\"><em>k</em> = 2<sup><em>t</em></sup><em>r</em></span>\n，其中 <span class=\"math inline\"><em>r</em></span> 是奇数且 <span\nclass=\"math inline\"><em>t</em> ≥ 1</span> ，然后计算 <span\nclass=\"math inline\"><em>x</em> = <em>g</em><sup><em>k</em>/2</sup>, <em>g</em><sup><em>k</em>/4</sup>, …, <em>g</em><sup><em>k</em>/2<sup><em>t</em></sup></sup> (mod  <em>N</em>)</span>，直到\n<span class=\"math inline\"><em>x</em> &gt; 1</span> 且 <span\nclass=\"math inline\"><em>y</em> = gcd (<em>x</em>−1,<em>N</em>) &gt; 1</span>\n。 如果这样的 <span class=\"math inline\"><em>y</em></span>\n存在，那么其中一个因子 <span class=\"math inline\"><em>p</em></span> 等于\n<span class=\"math inline\"><em>y</em></span> ，并且 <span\nclass=\"math inline\"><em>q</em> = <em>N</em>/<em>y</em></span>\n，这样就完成了。如果这样的 <span class=\"math inline\"><em>y</em></span>\n不存在，就重新生成随机数 <span class=\"math inline\"><em>g</em></span>\n。</p>\n</blockquote>\n<p>下面是我的代码，对原算法稍微进行了一点改动。原算法是先计算出 <span\nclass=\"math inline\"><em>t</em></span> 和 <span\nclass=\"math inline\"><em>r</em></span> ，然后依次计算 <span\nclass=\"math inline\"><em>x</em> = <em>g</em><sup><em>k</em>/2<sup><em>i</em></sup></sup></span>\n。这里我不计算 <span class=\"math inline\"><em>t</em></span> 和 <span\nclass=\"math inline\"><em>r</em></span> ，而是只要 <span\nclass=\"math inline\"><em>k</em></span> 是偶数，就将其除以 2，然后计算\n<span\nclass=\"math inline\"><em>x</em> = <em>g</em><sup><em>k</em></sup></span>\n并判断是否满足条件。这样可以减少一些计算，但是由于 <span\nclass=\"math inline\"><em>t</em></span> 并不大，所以减少的计算有限。</p>\n<p>完整代码见<a href=\"https://github.com/MeanZhang/RSA\">MeanZhang/RSA:\nRSA-Java</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 已知e，d，n，分解n</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> e 公钥e</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> d 私钥d</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> n 模数n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> p，q</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger[] attack(BigInteger e, BigInteger d, BigInteger n) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// p,q</span></span><br><span class=\"line\">    BigInteger[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// k=de-1</span></span><br><span class=\"line\">    <span class=\"type\">BigInteger</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> d.multiply(e).subtract(BigInteger.ONE);</span><br><span class=\"line\">    <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">g</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(n.bitLength(), random);</span><br><span class=\"line\">        <span class=\"comment\">// 选择随机数g，1&lt;g&lt;n</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (g.compareTo(BigInteger.ONE) &lt;= <span class=\"number\">0</span> || g.compareTo(n) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            g = <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(n.bitLength(), random);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">k1</span> <span class=\"operator\">=</span> k;</span><br><span class=\"line\">        <span class=\"comment\">// 计算t和g^(k/2^i)的过程合在一起</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k1.mod(BigInteger.TWO).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果k为偶数，就除以2</span></span><br><span class=\"line\">            k1 = k1.shiftRight(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 此时g^(k/2^i)=g^k1</span></span><br><span class=\"line\">            <span class=\"type\">BigInteger</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> g.modPow(k1, n);</span><br><span class=\"line\">            <span class=\"comment\">// 计算y=gcd(x−1,n)，直接赋值给p(result[0])</span></span><br><span class=\"line\">            result[<span class=\"number\">0</span>] = x.subtract(BigInteger.ONE).gcd(n);</span><br><span class=\"line\">            <span class=\"comment\">// 如果x&gt;1且y=gcd(x−1,n)&gt;1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.compareTo(BigInteger.ONE) &gt; <span class=\"number\">0</span> &amp;&amp; result[<span class=\"number\">0</span>].compareTo(BigInteger.ONE) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                result[<span class=\"number\">1</span>] = n.divide(result[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试数据：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e:</span><br><span class=\"line\">65537</span><br><span class=\"line\">d:</span><br><span class=\"line\">13085102850405329895940153649208766646679432053055210927814587187939575969334380946175257120108607885616731724467899991987963542311668962802613624160423864736904359544115910805381019345850330276964971412664144174157825068713331109139842487999112829255389047329358923488846912437792391102853729375052922599258215311601018992134762683570752403675370812499995354701024990414541327012769030147878934713424171374951602988478984432403148854042370903764361797455965930292322795814453835335323397068237664481359506461188857661605832041501219728374514303209642746672993156029099655958158717907546664548938973389857200804582177</span><br><span class=\"line\">n:</span><br><span class=\"line\">21378032245774894186324720788457768851857953294637267751313371903474996018902810092972224806315945430514626988743400353365786674788848003569698586194388463460699531620948408197942261177369324808332585418351947368544183614904162658914539989430070735676083960582943505227316151479174351490943931346982185481068889458087344890907035731467000101100009111593455801160870652558847164438348031498067369123608755518383163346962891967964682970251625764813457371461595048927486942272152822570449609158417324070867001419543608370026546341531367233199832189762919523227554947408242727690461831545997600374969434706782376320559561</span><br><span class=\"line\">p:</span><br><span class=\"line\">134015724574231629415725856596339106132655429815809390083191653420751276014515665041469448212111089978027787330894345961709429696830117657137052704491606694791519141111894965847240833879740293408266251425861598011543042632576624378597158795956174622709934079034648552634466265913328434606944071200422868130573</span><br><span class=\"line\">q:</span><br><span class=\"line\">159518834925475861956097917917341301031640418209579419960447972340833353891477422457476074816300423813142613130845835933143395284444599641612757310435466623981281701817688676270876235464147642571713805328342460087461430626730047957682558277868352127107752854583156354513612089006699159193484825862868615965357</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\">参考资料</h2>\n<aside id=\"footnotes\" class=\"footnotes footnotes-end-of-document\"\nrole=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p><a\nhref=\"https://www.di-mgt.com.au/rsa_factorize_n.html\">RSA: how to\nfactorize N given d</a><a href=\"#fnref1\" class=\"footnote-back\"\nrole=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</aside>\n",
            "tags": [
                "密码学",
                "RSA",
                "抽象代数"
            ]
        },
        {
            "id": "https://blog.meancoder.xyz/2020/biginteger-usage/",
            "url": "https://blog.meancoder.xyz/2020/biginteger-usage/",
            "title": "BigInteger 用法",
            "date_published": "2020-05-16T13:36:22.000Z",
            "content_html": "<p>今天在写 RSA，又用到了<code>java.math.BigInteger</code>类<a\nhref=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"\nrole=\"doc-noteref\"><sup>1</sup></a>，总结一下常用的用法。（写完才发现\ngcd 和求逆方法都有了）</p>\n<span id=\"more\"></span>\n<h2 id=\"biginteger-介绍\">BigInteger 介绍</h2>\n<p>继承自<code>Number</code>类，可表示任意长度的整数。<code>BigInteger</code>用等号可以直接进行复制，而不是引用地址。</p>\n<h2 id=\"构造方法\">构造方法</h2>\n<ul>\n<li><p><code>public BigInteger(int numBits, Random rnd)</code></p>\n<p>构造一个随机生成的<code>numBits</code>位的<code>BigInteger</code>。</p></li>\n<li><p><code>public BigInteger(String val)</code></p>\n<p>将十进制字符串表示的<code>val</code>转为<code>BigInteger</code>。</p></li>\n<li><p><code>public BigInteger(String val, int radix)</code></p>\n<p>将<code>radix</code>进制字符串表示的<code>val</code>转为<code>BigInteger</code>。</p></li>\n</ul>\n<h2 id=\"常用方法\">常用方法</h2>\n<ul>\n<li><p><code>public BigInteger add(BigInteger val)</code></p>\n<p>加法。</p></li>\n<li><p><code>public BigInteger subtract(BigInteger val)</code></p>\n<p>减法。</p></li>\n<li><p><code>public BigInteger multiply(BigInteger val)</code></p>\n<p>乘法。</p></li>\n<li><p><code>public BigInteger divide(BigInteger val)</code></p>\n<p>除法。</p></li>\n<li><p><code>public BigInteger[] divideAndRemainder(BigInteger val)</code></p>\n<p>带余除法，返回商和余数。</p></li>\n<li><p><code>public BigInteger remainder(BigInteger val)</code></p>\n<p>求余数。</p></li>\n<li><p><code>public BigInteger mod(BigInteger m)</code></p>\n<p>取模，注意和取余的区别。</p></li>\n<li><p><code>public BigInteger pow(int exponent)</code></p>\n<p>幂运算。</p></li>\n<li><p><code>public BigInteger gcd(BigInteger val)</code></p>\n<p>求最大公因子。</p></li>\n<li><p><code>public BigInteger abs()</code></p>\n<p>取绝对值。</p></li>\n<li><p><code>public BigInteger negate()</code></p>\n<p>取相反数。</p></li>\n<li><p><code>public BigInteger modPow(BigInteger exponent, BigInteger m)</code></p>\n<p>模幂。</p></li>\n<li><p><code>public BigInteger modInverse(BigInteger m)</code></p>\n<p>求逆元。</p></li>\n<li><p><code>public BigInteger shiftLeft(int n)</code></p>\n<p>左移<code>n</code>位。</p></li>\n<li><p><code>public BigInteger shiftRight(int n)</code></p>\n<p>右移<code>n</code>位。</p></li>\n<li><p><code>public int bitLength()</code></p>\n<p>返回二进制位数，不包括符号位。</p></li>\n<li><p><code>public static BigInteger valueOf(long val)</code></p>\n<p>返回一个值为<code>val</code>的<code>BigInteger</code>。</p></li>\n<li><p><code>public static BigInteger probablePrime(int bitLength, Random rnd)</code></p>\n<p>返回一个<code>bitLength</code>位的可能是素数的<code>BigInteger</code>。</p></li>\n<li><p><code>public boolean isProbablePrime(int certainty)</code></p>\n<p>判断是否可能为素数，素数准确率为<span\nclass=\"math inline\">1 − 1/2<sup><em>c</em><em>e</em><em>r</em><em>t</em><em>a</em><em>i</em><em>n</em><em>t</em><em>y</em></sup></span>。</p></li>\n<li><p><code>public int compareTo(BigInteger val)</code></p>\n<p>比较大小。小于返回<code>-1</code>，相等返回<code>0</code>，大于返回<code>1</code>。</p></li>\n<li><p><code>public boolean equals(Object x)</code></p>\n<p>判断是否相等。</p></li>\n<li><p><code>public String toString(int radix)</code></p>\n<p>返回以<code>radix</code>进制表示的字符串。若不传入参数，默认为十进制。</p></li>\n<li><p><code>public int intValue()</code></p>\n<p>将<code>BigInteger</code>转为<code>int</code>。</p></li>\n</ul>\n<h2 id=\"参考资料\">参考资料</h2>\n<aside id=\"footnotes\" class=\"footnotes footnotes-end-of-document\"\nrole=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p><a\nhref=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/math/BigInteger.html\">BigInteger\n(Java SE 14 &amp; JDK 14)</a><a href=\"#fnref1\" class=\"footnote-back\"\nrole=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</aside>\n",
            "tags": [
                "Java",
                "密码学",
                "RSA"
            ]
        }
    ]
}